import logging
from pathlib import Path

from aiogram import Bot, types, executor
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import Dispatcher
from aiogram.types import InputMediaVideo, InputMediaPhoto, ParseMode

from buttons import *
from text_answer import *
import config
from sql import *
import asyncio

ADMINS = config.ADMINS
logging.basicConfig(level=logging.INFO)

logging.basicConfig(level=logging.DEBUG)

bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

loop = asyncio.get_event_loop()
db = DBCommands(loop)


def deletefiles(id):
    for filename in Path('.').glob('*' + str(id) + "*"):
        filename.unlink()


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.answer(text_start, reply_markup=l1)
    await db.insert_user()


@dp.message_handler(text=['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'])
async def process_start_command(message: types.Message):
    await bot.send_media_group(message.chat.id, await db.get_media_st())
    deletefiles(message.from_user.id)


@dp.message_handler(text=['–°–æ–æ–±—â–µ–Ω–∏—è'])
async def process_start_command(message: types.Message):
    filename = await db.get_excel_file_userstext()
    await bot.send_document(message.from_user.id, open(filename, 'rb'))
    deletefiles(message.from_user.id)


@dp.message_handler(text='–ú–µ–Ω—é')
async def process_start_command(message: types.Message):
    if message.from_user.id in ADMINS and l1_st not in l1:
        kb = l1_admin
    else:
        kb = l1
    await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.", reply_markup=kb)
    await db.insert_move('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–ú–µ–Ω—é')


@dp.message_handler(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ')
async def process_start_command(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å, –∫—É—Ä—Å.", reply_markup=get_kb_l2(1))
    await db.insert_move('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ')


@dp.message_handler(text='–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞')
async def process_start_command(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å, –∫—É—Ä—Å.", reply_markup=get_kb_l2(2))
    await db.insert_move('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞')


@dp.message_handler(text='–û–ø–ª–∞—Ç–∏—Ç—å –∫—É—Ä—Å')
async def process_start_command(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å, –∫—É—Ä—Å.", reply_markup=get_kb_l2(3))
    await db.insert_move('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–û–ø–ª–∞—Ç–∏—Ç—å –∫—É—Ä—Å')


@dp.message_handler(text='–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã')
async def process_start_command(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å, –≤–æ–ø—Ä–æ—Å.", reply_markup=l2_questions)
    await db.insert_move('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã')


@dp.message_handler(text='–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º')
async def process_start_command(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –∏ –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.", reply_markup=kbPhone)


#  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ
@dp.message_handler(
    text=['‚Ñπ ¬´–°—Ç–∏–ª—å –¥–ª—è —Å–µ–±—è¬ª —Å –¢–∞—Ç—å—è–Ω–æ–π', '‚Ñπ ¬´–°—Ç–∏–ª—å –¥–ª—è —Å–µ–±—è¬ª —Å –∫—É—Ä–∞—Ç–æ—Ä–æ–º', '‚Ñπ ¬´–ü—Ä–æ—Ñ–µ—Å—Å–∏—è-—Å—Ç–∏–ª–∏—Å—Ç¬ª —Å –¢–∞—Ç—å—è–Ω–æ–π',
          '‚Ñπ ¬´–ü—Ä–æ—Ñ–µ—Å—Å–∏—è-—Å—Ç–∏–ª–∏—Å—Ç¬ª —Å –∫—É—Ä–∞—Ç–æ—Ä–æ–º'])
async def process_start_command(message: types.Message):
    await db.insert_move('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ', message.text.replace('‚Ñπ ', ''))
    await message.answer(getTextInfoCourse(message.text), reply_markup=getkb1(await db.get_last_button_user()), parse_mode=ParseMode.MARKDOWN)



#  –°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞
@dp.message_handler(
    text=['üí∞ ¬´–°—Ç–∏–ª—å –¥–ª—è —Å–µ–±—è¬ª —Å –¢–∞—Ç—å—è–Ω–æ–π', 'üí∞ ¬´–°—Ç–∏–ª—å –¥–ª—è —Å–µ–±—è¬ª —Å –∫—É—Ä–∞—Ç–æ—Ä–æ–º', 'üí∞ ¬´–ü—Ä–æ—Ñ–µ—Å—Å–∏—è-—Å—Ç–∏–ª–∏—Å—Ç¬ª —Å –¢–∞—Ç—å—è–Ω–æ–π',
          'üí∞ ¬´–ü—Ä–æ—Ñ–µ—Å—Å–∏—è-—Å—Ç–∏–ª–∏—Å—Ç¬ª —Å –∫—É—Ä–∞—Ç–æ—Ä–æ–º'])
async def process_start_command(message: types.Message):
    await db.insert_move('–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞', message.text.replace('üí∞ ', ''))
    await message.answer(getTextInfoCoast(message.text), reply_markup=getkb2(await db.get_last_button_user()))



#  –û–ø–ª–∞—Ç–∏—Ç—å –∫—É—Ä—Å
@dp.message_handler(
    text=['üí≥ ¬´–°—Ç–∏–ª—å –¥–ª—è —Å–µ–±—è¬ª —Å –¢–∞—Ç—å—è–Ω–æ–π', 'üí≥ ¬´–°—Ç–∏–ª—å –¥–ª—è —Å–µ–±—è¬ª —Å –∫—É—Ä–∞—Ç–æ—Ä–æ–º', 'üí≥ ¬´–ü—Ä–æ—Ñ–µ—Å—Å–∏—è-—Å—Ç–∏–ª–∏—Å—Ç¬ª —Å –¢–∞—Ç—å—è–Ω–æ–π',
          'üí≥ ¬´–ü—Ä–æ—Ñ–µ—Å—Å–∏—è-—Å—Ç–∏–ª–∏—Å—Ç¬ª —Å –∫—É—Ä–∞—Ç–æ—Ä–æ–º'])
async def process_start_command(message: types.Message):
    await db.insert_move('–û–ø–ª–∞—Ç–∏—Ç—å –∫—É—Ä—Å', message.text.replace('üí≥ ', ''))
    await message.answer(getTextInfoPay(message.text), reply_markup=getkb3(await db.get_last_button_user()))



#  –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
@dp.message_handler(regexp="\?")
async def process_start_command(message: types.Message):
    if getTextInfoQuestions(message.text) != "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –∑–Ω–∞—é –∫–∞–∫ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –í–∞—à –≤–æ–ø—Ä–æ—Å. " \
                                             "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–∑ –º–µ–Ω—é –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.":
        await message.answer(getTextInfoQuestions(message.text), reply_markup=kbManager)
        await db.insert_move('–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã', message.text)
    else:
        await message.answer(getTextInfoQuestions(message.text), reply_markup=kbManager)
        await message.answer('–¢–∞–∫ –∂–µ, —É –Ω–∞—Å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–¥–µ–ª —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.', reply_markup=l2_questions)


@dp.message_handler(regexp="^[+0-9][-0-9]+$")
async def process_start_command(message: types.Message):
    for admin in ADMINS:
        await bot.send_message(chat_id=admin, text=f'–ü—Ä–æ—Å—å–±–∞ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:\n'
                                                   f'–¢–µ–ª–µ—Ñ–æ–Ω: {message.text}\n'
                                                   f'–ò–º—è: {message.from_user.first_name}\n'
                                                   f'–§–∞–º–∏–ª–∏—è: {message.from_user.last_name}')
    await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω! –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–ø–∏—à–µ—Ç –í–∞–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º, –æ–∂–∏–¥–∞–π—Ç–µ.", reply_markup=l1)
    last_move = await db.get_last_button_user()
    await db.insert_move(last_move, '–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º')
    await db.update_phone(message.text, message.from_user.id)


@dp.callback_query_handler(lambda c: c.data == 'menu')
async def callbac_menu(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    if callback_query.from_user.id in ADMINS and l1_st not in l1:
        kb = l1_admin
    else:
        kb = l1
    await bot.send_message(callback_query.from_user.id, "–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.", reply_markup=kb)


@dp.callback_query_handler(lambda c: c.data == 'manager')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏.',
                           reply_markup=kbPhone)


# @dp.callback_query_handler(text="pay")
# async def process_callback_button23(callback_query: types.CallbackQuery):
#     #await bot.answer_callback_query(callback_query.id, 'qwe')
#     print('1')


@dp.message_handler(content_types=['contact'])
async def process_start_command(message: types.Message):
    print(message.contact)
    for admin in ADMINS:
        await bot.send_message(chat_id=admin, text=f'–ü—Ä–æ—Å—å–±–∞ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:\n'
                                                   f'–¢–µ–ª–µ—Ñ–æ–Ω: {message.contact["phone_number"]}\n'
                                                   f'–ò–º—è: {message.contact["first_name"]}\n'
                                                   f'–§–∞–º–∏–ª–∏—è: {message.contact["last_name"]}')
    await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω! –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–ø–∏—à–µ—Ç –í–∞–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º, –æ–∂–∏–¥–∞–π—Ç–µ.", reply_markup=l1)
    last_move = await db.get_last_button_user()
    await db.insert_move(last_move, '–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º')
    await db.update_phone(message.contact["phone_number"], message.from_user.id)


@dp.message_handler()
async def any_text(message: types.Message):
    if message.from_user.id in ADMINS and l1_st not in l1:
        kb = l1_admin
    else:
        kb = l1
    await db.insert_text_user()
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å, —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.', reply_markup=kb)


async def on_startup(db):
    print('start')
    for admin in ADMINS:
        await bot.send_message(chat_id=admin, text="–ß–∞—Ç-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω.")


async def on_shutdown(db):
    for admin in ADMINS:
        await bot.send_message(chat_id=admin, text="–Ø –æ—Ç–∫–ª—é—á—ë–Ω!")
    loop.close()
    await bot.close()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_shutdown=on_shutdown, on_startup=on_startup)
